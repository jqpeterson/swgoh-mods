// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Uuid = require("bs-guid/src/Uuid.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Aeson_decode = require("bs-aeson/src/Aeson_decode.js");
var Aeson_encode = require("bs-aeson/src/Aeson_encode.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function makeprimaryvalue(primarystat, primarylevel, pips) {
  switch (primarystat) {
    case /* PrimaryAccuracy */0 :
        var x = primarylevel[0];
        if (pips !== 3) {
          if (pips >= 4) {
            return /* PrimaryFloat */[0.75 + 0.75 * x];
          } else {
            return /* PrimaryFloat */[0.0];
          }
        } else {
          return /* PrimaryFloat */[0.75 + 0.65 * x];
        }
    case /* PrimaryCriticalAvoidance */1 :
        var x$1 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
          case /* Pip2 */1 :
              return /* PrimaryFloat */[0.0];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[1.0 + 1.1 * x$1];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[1.5 + 1.3 * x$1];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[1.5 + 1.5 * x$1];
          
        }
    case /* PrimaryCriticalChance */2 :
        var x$2 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
          case /* Pip2 */1 :
              return /* PrimaryFloat */[0.0];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[0.5 + 0.55 * x$2];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[0.75 + 0.65 * x$2];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[0.75 + 0.75 * x$2];
          
        }
    case /* PrimaryCriticalDamage */3 :
        var x$3 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
              return /* PrimaryFloat */[0.0];
          case /* Pip2 */1 :
              return /* PrimaryFloat */[1.5 + 1.5 * x$3];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[1.5 + 1.65 * x$3];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[2.25 + 1.95 * x$3];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[2.25 + 2.25 * x$3];
          
        }
    case /* PrimaryDefense */4 :
        var x$4 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
          case /* Pip2 */1 :
              return /* PrimaryFloat */[0.0];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[0.25 + 0.5 * x$4];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[0.5 + 0.5 * x$4];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[0.5 + 0.75 * x$4];
          
        }
    case /* PrimaryHealth */5 :
        var x$5 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
          case /* Pip2 */1 :
              return /* PrimaryFloat */[0.0];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[0.13 + 0.25 * x$5];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[0.25 + 0.25 * x$5];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[0.252667 + 0.375 * x$5];
          
        }
    case /* PrimaryOffense */6 :
        var x$6 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
          case /* Pip2 */1 :
              return /* PrimaryFloat */[0.0];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[0.13 + 0.25 * x$6];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[0.25 + 0.25 * x$6];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[0.5 + 0.75 * x$6];
          
        }
    case /* PrimaryPotency */7 :
        var x$7 = primarylevel[0];
        if (pips !== 3) {
          if (pips >= 4) {
            return /* PrimaryFloat */[1.5 + 1.5 * x$7];
          } else {
            return /* PrimaryFloat */[0.0];
          }
        } else {
          return /* PrimaryFloat */[1.5 + 1.35 * x$7];
        }
    case /* PrimaryProtection */8 :
        var x$8 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
          case /* Pip2 */1 :
              return /* PrimaryFloat */[0.0];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[0.5 + 1.0 * x$8];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[1.0 + 1.0 * x$8];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[1.0 + 1.5 * x$8];
          
        }
    case /* PrimarySpeed */9 :
        var x$9 = primarylevel[0];
        if (pips !== 3) {
          if (pips >= 4) {
            return /* PrimaryFloat */[(0.0 - 0.0028909) * Caml_int32.imul(Caml_int32.imul(x$9, x$9), x$9) + 0.0693816 * Caml_int32.imul(x$9, x$9) + 1.41293 * x$9 + 2.73626];
          } else {
            return /* PrimaryFloat */[0.0];
          }
        } else {
          return /* PrimaryFloat */[0.00516756 * Caml_int32.imul(x$9, x$9) + (1.55895 * x$9 + 1.44287)];
        }
    case /* PrimaryTenacity */10 :
        var x$10 = primarylevel[0];
        switch (pips) {
          case /* Pip1 */0 :
          case /* Pip2 */1 :
              return /* PrimaryFloat */[0.0];
          case /* Pip3 */2 :
              return /* PrimaryFloat */[1.0 + 1.1 * x$10];
          case /* Pip4 */3 :
              return /* PrimaryFloat */[1.5 + 1.3 * x$10];
          case /* Pip5 */4 :
              return /* PrimaryFloat */[1.5 + 1.5 * x$10];
          
        }
    
  }
}

function encodePrimaryStat(pstat) {
  switch (pstat) {
    case /* PrimaryAccuracy */0 :
        return "Accuracy %";
    case /* PrimaryCriticalAvoidance */1 :
        return "Critical Avoidance %";
    case /* PrimaryCriticalChance */2 :
        return "Critical Chance %";
    case /* PrimaryCriticalDamage */3 :
        return "Critical Damage %";
    case /* PrimaryDefense */4 :
        return "Defense %";
    case /* PrimaryHealth */5 :
        return "Health %";
    case /* PrimaryOffense */6 :
        return "Offense %";
    case /* PrimaryPotency */7 :
        return "Potency %";
    case /* PrimaryProtection */8 :
        return "Protection %";
    case /* PrimarySpeed */9 :
        return "Speed";
    case /* PrimaryTenacity */10 :
        return "Tenacity %";
    
  }
}

function decodePrimaryStat(json) {
  var primstatstr = Aeson_decode.string(json);
  var str;
  try {
    str = primstatstr;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      throw exn;
    }
  }
  switch (str) {
    case "Accuracy %" :
        return /* Ok */Block.__(0, [/* PrimaryAccuracy */0]);
    case "Critical Avoidance %" :
        return /* Ok */Block.__(0, [/* PrimaryCriticalAvoidance */1]);
    case "Critical Chance %" :
        return /* Ok */Block.__(0, [/* PrimaryCriticalChance */2]);
    case "Critical Damage %" :
        return /* Ok */Block.__(0, [/* PrimaryCriticalDamage */3]);
    case "Defense %" :
        return /* Ok */Block.__(0, [/* PrimaryDefense */4]);
    case "Health %" :
        return /* Ok */Block.__(0, [/* PrimaryHealth */5]);
    case "Offense %" :
        return /* Ok */Block.__(0, [/* PrimaryOffense */6]);
    case "Potency %" :
        return /* Ok */Block.__(0, [/* PrimaryPotency */7]);
    case "Protection %" :
        return /* Ok */Block.__(0, [/* PrimaryProtection */8]);
    case "Speed" :
        return /* Ok */Block.__(0, [/* PrimarySpeed */9]);
    case "Tenacity %" :
        return /* Ok */Block.__(0, [/* PrimaryTenacity */10]);
    default:
      return /* Error */Block.__(1, ["Instead of a PrimaryStat, received: " + str]);
  }
}

function primaryStatToString(pstat) {
  switch (pstat) {
    case /* PrimaryAccuracy */0 :
        return " Primary Stat: Accuracy %";
    case /* PrimaryCriticalAvoidance */1 :
        return " Primary Stat: Critical Avoidance %";
    case /* PrimaryCriticalChance */2 :
        return " Primary Stat: Critical Chance %";
    case /* PrimaryCriticalDamage */3 :
        return " Primary Stat: Critical Damage %";
    case /* PrimaryDefense */4 :
        return " Primary Stat: Defense %";
    case /* PrimaryHealth */5 :
        return " Primary Stat: Health %";
    case /* PrimaryOffense */6 :
        return " Primary Stat: Offense %";
    case /* PrimaryPotency */7 :
        return " Primary Stat: Potency %";
    case /* PrimaryProtection */8 :
        return " Primary Stat: Protection %";
    case /* PrimarySpeed */9 :
        return " Primary Stat: Speed";
    case /* PrimaryTenacity */10 :
        return " Primary Stat: Tenacity %";
    
  }
}

function truncatedFloatTo2DigitsString(floatval) {
  return floatval.toFixed(2);
}

function truncatedFloatToIntString(floatval) {
  return floatval.toFixed(0);
}

function stringifyValue(pstat, pval) {
  if (pstat !== 9) {
    return pval[0].toFixed(2);
  } else {
    return pval[0].toFixed(0);
  }
}

function encodePrimaryValue(pstat, pval) {
  var stringvalue = stringifyValue(pstat, pval);
  return "+" + stringvalue;
}

function decodePrimaryValue(json) {
  var primaryValueString = Aeson_decode.string(json);
  if (primaryValueString === "") {
    return /* Error */Block.__(1, ["Expected a PrimaryValue, but received and empty value"]);
  } else {
    return /* Ok */Block.__(0, [/* PrimaryFloat */[Number(primaryValueString)]]);
  }
}

function stringifyPrimaryValue(param) {
  return " PrimaryValue: " + param[0].toString();
}

function encodePips(p) {
  switch (p) {
    case /* Pip1 */0 :
        return 1;
    case /* Pip2 */1 :
        return 2;
    case /* Pip3 */2 :
        return 3;
    case /* Pip4 */3 :
        return 4;
    case /* Pip5 */4 :
        return 5;
    
  }
}

function decodePips(json) {
  var pipint = Aeson_decode.$$int(json);
  switch (pipint) {
    case 1 :
        return /* Ok */Block.__(0, [/* Pip1 */0]);
    case 2 :
        return /* Ok */Block.__(0, [/* Pip2 */1]);
    case 3 :
        return /* Ok */Block.__(0, [/* Pip3 */2]);
    case 4 :
        return /* Ok */Block.__(0, [/* Pip4 */3]);
    case 5 :
        return /* Ok */Block.__(0, [/* Pip5 */4]);
    default:
      return /* Error */Block.__(1, ["Expected a Pip number 1-5, but instead received: " + pipint.toString()]);
  }
}

function stringifyPips(p) {
  switch (p) {
    case /* Pip1 */0 :
        return " pips: Pip1";
    case /* Pip2 */1 :
        return " pips: Pip2";
    case /* Pip3 */2 :
        return " pips: Pip3";
    case /* Pip4 */3 :
        return " pips: Pip4";
    case /* Pip5 */4 :
        return " pips: Pip5";
    
  }
}

function encodeShape(shp) {
  switch (shp) {
    case /* Square */0 :
        return "square";
    case /* Arrow */1 :
        return "arrow";
    case /* Diamond */2 :
        return "diamond";
    case /* Triangle */3 :
        return "triangle";
    case /* Circle */4 :
        return "circle";
    case /* Cross */5 :
        return "cross";
    
  }
}

function decodeShape(json) {
  var shp = Aeson_decode.string(json);
  switch (shp) {
    case "arrow" :
        return /* Ok */Block.__(0, [/* Arrow */1]);
    case "circle" :
        return /* Ok */Block.__(0, [/* Circle */4]);
    case "cross" :
        return /* Ok */Block.__(0, [/* Cross */5]);
    case "diamond" :
        return /* Ok */Block.__(0, [/* Diamond */2]);
    case "square" :
        return /* Ok */Block.__(0, [/* Square */0]);
    case "triangle" :
        return /* Ok */Block.__(0, [/* Triangle */3]);
    default:
      return /* Error */Block.__(1, ["Expected a shape, but instead received: " + shp]);
  }
}

function stringifyShape(shp) {
  switch (shp) {
    case /* Square */0 :
        return " Shape: Square";
    case /* Arrow */1 :
        return " Shape: Arrow";
    case /* Diamond */2 :
        return " Shape: Diamond";
    case /* Triangle */3 :
        return " Shape: Triangle";
    case /* Circle */4 :
        return " Shape: Circle";
    case /* Cross */5 :
        return " Shape: Cross";
    
  }
}

function encodeStatSet(sset) {
  switch (sset) {
    case /* CriticalChanceSet */0 :
        return "critchance";
    case /* CriticalDamageSet */1 :
        return "critdamage";
    case /* DefenseSet */2 :
        return "defense";
    case /* HealthSet */3 :
        return "health";
    case /* OffenseSet */4 :
        return "offense";
    case /* PotencySet */5 :
        return "potency";
    case /* SpeedSet */6 :
        return "speed";
    case /* TenacitySet */7 :
        return "tenacity";
    
  }
}

function decodeStatSet(json) {
  var sset = Aeson_decode.string(json);
  switch (sset) {
    case "critchance" :
        return /* Ok */Block.__(0, [/* CriticalChanceSet */0]);
    case "critdamage" :
        return /* Ok */Block.__(0, [/* CriticalDamageSet */1]);
    case "defense" :
        return /* Ok */Block.__(0, [/* DefenseSet */2]);
    case "health" :
        return /* Ok */Block.__(0, [/* HealthSet */3]);
    case "offense" :
        return /* Ok */Block.__(0, [/* OffenseSet */4]);
    case "potency" :
        return /* Ok */Block.__(0, [/* PotencySet */5]);
    case "speed" :
        return /* Ok */Block.__(0, [/* SpeedSet */6]);
    case "tenacity" :
        return /* Ok */Block.__(0, [/* TenacitySet */7]);
    default:
      return /* Error */Block.__(1, ["Expected a statset, but instead received: " + sset]);
  }
}

function stringifyStatSet(sset) {
  switch (sset) {
    case /* CriticalChanceSet */0 :
        return " Set: Crit Chance";
    case /* CriticalDamageSet */1 :
        return " Set: Crit Damage";
    case /* DefenseSet */2 :
        return " Set: Defense";
    case /* HealthSet */3 :
        return " Set: Health";
    case /* OffenseSet */4 :
        return " Set: Offense";
    case /* PotencySet */5 :
        return " Set: Potency";
    case /* SpeedSet */6 :
        return " Set: Speed";
    case /* TenacitySet */7 :
        return " Set: Tenacity";
    
  }
}

function encodePrimaryLevel(param) {
  return param[0];
}

function decodePrimaryLevel(json) {
  var lvl = Aeson_decode.$$int(json);
  if (lvl < 1) {
    return /* Error */Block.__(1, ["Unexpected a primarylevel outside range 1-15: " + lvl.toString()]);
  } else if (lvl > 15) {
    return /* Error */Block.__(1, ["Unexpected a primarylevel outside range 1-15: " + lvl.toString()]);
  } else {
    return /* Ok */Block.__(0, [/* PrimaryLevel */[lvl]]);
  }
}

function stringifyPrimaryLevel(param) {
  return "Level: " + param[0].toString();
}

function encodeTier(color) {
  switch (color) {
    case /* Grey */0 :
        return 1;
    case /* Green */1 :
        return 2;
    case /* Blue */2 :
        return 3;
    case /* Purple */3 :
        return 4;
    case /* Gold */4 :
        return 5;
    
  }
}

function decodeTier(json) {
  var ntier = Aeson_decode.$$int(json);
  switch (ntier) {
    case 1 :
        return /* Ok */Block.__(0, [/* Grey */0]);
    case 2 :
        return /* Ok */Block.__(0, [/* Green */1]);
    case 3 :
        return /* Ok */Block.__(0, [/* Blue */2]);
    case 4 :
        return /* Ok */Block.__(0, [/* Purple */3]);
    case 5 :
        return /* Ok */Block.__(0, [/* Gold */4]);
    default:
      return /* Error */Block.__(1, ["Unexpected tier outside range 1-5: " + ntier.toString()]);
  }
}

function stringifyTier(color) {
  switch (color) {
    case /* Grey */0 :
        return " Tier: Grey";
    case /* Green */1 :
        return " Tier: Green";
    case /* Blue */2 :
        return " Tier: Blue";
    case /* Purple */3 :
        return " Tier: Purple";
    case /* Gold */4 :
        return " Tier: Gold";
    
  }
}

function encodeCharacterId(param) {
  return param[0];
}

function decodeCharacterId(json) {
  var charid = Aeson_decode.string(json);
  return /* Ok */Block.__(0, [/* CharacterId */[charid]]);
}

function stringifyCharacterId(param) {
  return " CharacterId: " + param[0];
}

var randomuid36 = Uuid.V4.uuidv4(/* () */0);

var uid18 = $$String.sub(randomuid36, 0, 18);

var makeModUId = uid18 + "5168";

function encodeModUId(maybemoduid) {
  if (maybemoduid !== undefined) {
    return maybemoduid[0];
  } else {
    return makeModUId;
  }
}

function decodeModUId(json) {
  var modId = Aeson_decode.string(json);
  return /* Ok */Block.__(0, [/* ModUniqueId */[modId]]);
}

function stringifyModUId(param) {
  return " ModUId: " + param[0];
}

function encodeSecondaryStat(maybesstat) {
  if (maybesstat !== undefined) {
    switch (maybesstat) {
      case /* CriticalChance */0 :
          return "Critical Chance %";
      case /* Defense */1 :
          return "Defense";
      case /* DefensePercentage */2 :
          return "Defense %";
      case /* Health */3 :
          return "Health";
      case /* HealthPercentage */4 :
          return "Health %";
      case /* Offense */5 :
          return "Offense";
      case /* OffensePercentage */6 :
          return "Offense %";
      case /* PotencyPercentage */7 :
          return "Potency %";
      case /* Protection */8 :
          return "Protection";
      case /* ProtectionPercentage */9 :
          return "Protection %";
      case /* Speed */10 :
          return "Speed";
      case /* TenacityPercentage */11 :
          return "Tenacity %";
      
    }
  } else {
    return "";
  }
}

function decodeSecondaryStat(json) {
  var sstat = Aeson_decode.string(json);
  switch (sstat) {
    case "" :
        return /* Ok */Block.__(0, [undefined]);
    case "Critical Chance %" :
        return /* Ok */Block.__(0, [/* CriticalChance */0]);
    case "Defense" :
        return /* Ok */Block.__(0, [/* Defense */1]);
    case "Defense %" :
        return /* Ok */Block.__(0, [/* DefensePercentage */2]);
    case "Health" :
        return /* Ok */Block.__(0, [/* Health */3]);
    case "Health %" :
        return /* Ok */Block.__(0, [/* HealthPercentage */4]);
    case "Offense" :
        return /* Ok */Block.__(0, [/* Offense */5]);
    case "Offense %" :
        return /* Ok */Block.__(0, [/* OffensePercentage */6]);
    case "Potency %" :
        return /* Ok */Block.__(0, [/* PotencyPercentage */7]);
    case "Protection" :
        return /* Ok */Block.__(0, [/* Protection */8]);
    case "Protection %" :
        return /* Ok */Block.__(0, [/* ProtectionPercentage */9]);
    case "Speed" :
        return /* Ok */Block.__(0, [/* Speed */10]);
    case "Tenacity %" :
        return /* Ok */Block.__(0, [/* TenacityPercentage */11]);
    default:
      return /* Error */Block.__(1, ["Expected a secondarystat, but instead received: " + sstat]);
  }
}

function stringifySecondaryStat(ssecstat) {
  if (ssecstat !== undefined) {
    switch (ssecstat) {
      case /* CriticalChance */0 :
          return " Secondary Stat: Critical Chance %";
      case /* Defense */1 :
          return " Secondary Stat: Defense";
      case /* DefensePercentage */2 :
          return " Secondary Stat: Defense %";
      case /* Health */3 :
          return " Secondary Stat: Health";
      case /* HealthPercentage */4 :
          return " Secondary Stat: Health %";
      case /* Offense */5 :
          return " Secondary Stat: Offense";
      case /* OffensePercentage */6 :
          return " Secondary Stat: Offense %";
      case /* PotencyPercentage */7 :
          return " Secondary Stat: Potency %";
      case /* Protection */8 :
          return " Secondary Stat: Protection";
      case /* ProtectionPercentage */9 :
          return " Secondary Stat: Protection %";
      case /* Speed */10 :
          return " Secondary Stat: Speed";
      case /* TenacityPercentage */11 :
          return " Secondary Stat: Tenacity %";
      
    }
  } else {
    return " Secondary Stat: None";
  }
}

function encodeSecondaryValue(maybeval) {
  if (maybeval !== undefined) {
    return "+" + maybeval[0].toString();
  } else {
    return "";
  }
}

function decodeSecondaryValue(json) {
  var svalue = Aeson_decode.string(json);
  if (svalue === "") {
    return /* Ok */Block.__(0, [undefined]);
  } else {
    return /* Ok */Block.__(0, [/* SecondaryFloat */[Number(svalue)]]);
  }
}

function stringifySecondaryValue(maybevalue) {
  if (maybevalue !== undefined) {
    return " Secondary Value: " + maybevalue[0].toString();
  } else {
    return " Secondary Value: None";
  }
}

function encodeSecondaryLevel(maybelvl) {
  if (maybelvl !== undefined) {
    switch (maybelvl) {
      case /* SecondaryLevel1 */0 :
          return 1;
      case /* SecondaryLevel2 */1 :
          return 2;
      case /* SecondaryLevel3 */2 :
          return 3;
      case /* SecondaryLevel4 */3 :
          return 4;
      
    }
  } else {
    return "";
  }
}

function decodeSecondaryLevel(json) {
  var decodeStr = function (js) {
    Aeson_decode.string(js);
    return ;
  };
  var decodeInt = function (js) {
    return Aeson_decode.$$int(js);
  };
  var maybelvl = Aeson_decode.oneOf(/* :: */[
        decodeStr,
        /* :: */[
          decodeInt,
          /* [] */0
        ]
      ], json);
  if (maybelvl !== undefined) {
    var x = maybelvl;
    switch (x) {
      case 1 :
          return /* Ok */Block.__(0, [/* SecondaryLevel1 */0]);
      case 2 :
          return /* Ok */Block.__(0, [/* SecondaryLevel2 */1]);
      case 3 :
          return /* Ok */Block.__(0, [/* SecondaryLevel3 */2]);
      case 4 :
          return /* Ok */Block.__(0, [/* SecondaryLevel4 */3]);
      default:
        return /* Error */Block.__(1, ["Unexpected a secondarylevel outside range 1-4: " + x.toString()]);
    }
  } else {
    return /* Ok */Block.__(0, [undefined]);
  }
}

function stringifySecondaryLevel(maybelvl) {
  if (maybelvl !== undefined) {
    switch (maybelvl) {
      case /* SecondaryLevel1 */0 :
          return " Secondary Level: 1";
      case /* SecondaryLevel2 */1 :
          return " Secondary Level: 2";
      case /* SecondaryLevel3 */2 :
          return " Secondary Level: 3";
      case /* SecondaryLevel4 */3 :
          return " Secondary Level: 4";
      
    }
  } else {
    return " Secondary Level: None";
  }
}

function encodeCharMod(cm) {
  return Aeson_encode.object_(/* :: */[
              /* tuple */[
                "primaryBonusType",
                encodePrimaryStat(cm.primstat)
              ],
              /* :: */[
                /* tuple */[
                  "primaryBonusValue",
                  encodePrimaryValue(cm.primstat, cm.primvalue)
                ],
                /* :: */[
                  /* tuple */[
                    "secondaryType_1",
                    encodeSecondaryStat(cm.secondarystat1)
                  ],
                  /* :: */[
                    /* tuple */[
                      "secondaryValue_1",
                      encodeSecondaryValue(cm.secondaryvalue1)
                    ],
                    /* :: */[
                      /* tuple */[
                        "secondaryRoll_1",
                        encodeSecondaryLevel(cm.secondarylevel1)
                      ],
                      /* :: */[
                        /* tuple */[
                          "secondaryType_2",
                          encodeSecondaryStat(cm.secondarystat2)
                        ],
                        /* :: */[
                          /* tuple */[
                            "secondaryValue_2",
                            encodeSecondaryValue(cm.secondaryvalue2)
                          ],
                          /* :: */[
                            /* tuple */[
                              "secondaryRoll_2",
                              encodeSecondaryLevel(cm.secondarylevel2)
                            ],
                            /* :: */[
                              /* tuple */[
                                "secondaryType_3",
                                encodeSecondaryStat(cm.secondarystat3)
                              ],
                              /* :: */[
                                /* tuple */[
                                  "secondaryValue_3",
                                  encodeSecondaryValue(cm.secondaryvalue3)
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "secondaryRoll_3",
                                    encodeSecondaryLevel(cm.secondarylevel3)
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "secondaryType_4",
                                      encodeSecondaryStat(cm.secondarystat4)
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "secondaryValue_4",
                                        encodeSecondaryValue(cm.secondaryvalue4)
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "secondaryRoll_4",
                                          encodeSecondaryLevel(cm.secondarylevel4)
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "pips",
                                            encodePips(cm.primpips)
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "slot",
                                              encodeShape(cm.primshape)
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "set",
                                                encodeStatSet(cm.primset)
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "level",
                                                  cm.primlevel[0]
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "tier",
                                                    encodeTier(cm.primtier)
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "characterID",
                                                      Aeson_encode.optional(encodeCharacterId, cm.primchar)
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "mod_uid",
                                                        encodeModUId(cm.primmodid)
                                                      ],
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function decodeCharMod(json) {
  return {
          primstat: Aeson_decode.unwrapResult(Aeson_decode.field("primaryBonusType", decodePrimaryStat, json)),
          primvalue: Aeson_decode.unwrapResult(Aeson_decode.field("primaryBonusValue", decodePrimaryValue, json)),
          secondarystat1: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryType_1", decodeSecondaryStat, json)),
          secondaryvalue1: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryValue_1", decodeSecondaryValue, json)),
          secondarylevel1: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryRoll_1", decodeSecondaryLevel, json)),
          secondarystat2: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryType_2", decodeSecondaryStat, json)),
          secondaryvalue2: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryValue_2", decodeSecondaryValue, json)),
          secondarylevel2: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryRoll_2", decodeSecondaryLevel, json)),
          secondarystat3: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryType_3", decodeSecondaryStat, json)),
          secondaryvalue3: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryValue_3", decodeSecondaryValue, json)),
          secondarylevel3: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryRoll_3", decodeSecondaryLevel, json)),
          secondarystat4: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryType_4", decodeSecondaryStat, json)),
          secondaryvalue4: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryValue_4", decodeSecondaryValue, json)),
          secondarylevel4: Aeson_decode.unwrapResult(Aeson_decode.field("secondaryRoll_4", decodeSecondaryLevel, json)),
          primpips: Aeson_decode.unwrapResult(Aeson_decode.field("pips", decodePips, json)),
          primshape: Aeson_decode.unwrapResult(Aeson_decode.field("slot", decodeShape, json)),
          primset: Aeson_decode.unwrapResult(Aeson_decode.field("set", decodeStatSet, json)),
          primlevel: Aeson_decode.unwrapResult(Aeson_decode.field("level", decodePrimaryLevel, json)),
          primtier: Aeson_decode.unwrapResult(Aeson_decode.field("tier", decodeTier, json)),
          primchar: Aeson_decode.field("characterID", (function (param) {
                  return Aeson_decode.optional((function (x) {
                                return Aeson_decode.unwrapResult(decodeCharacterId(x));
                              }), param);
                }), json),
          primmodid: Aeson_decode.field("mod_uid", (function (param) {
                  return Aeson_decode.optional((function (x) {
                                return Aeson_decode.unwrapResult(decodeModUId(x));
                              }), param);
                }), json)
        };
}

function stringifyCharMod(cm) {
  var strstat = primaryStatToString(cm.primstat);
  var strval = stringifyPrimaryValue(cm.primvalue);
  var strpips = stringifyPips(cm.primpips);
  var strshape = stringifyShape(cm.primshape);
  var strset = stringifyStatSet(cm.primset);
  var strlvl = stringifyPrimaryLevel(cm.primlevel);
  var strtier = stringifyTier(cm.primtier);
  var strsstat1 = stringifySecondaryStat(cm.secondarystat1);
  var strsvalue1 = stringifySecondaryValue(cm.secondaryvalue1);
  var strslevel1 = stringifySecondaryLevel(cm.secondarylevel1);
  var strsstat2 = stringifySecondaryStat(cm.secondarystat2);
  var strsvalue2 = stringifySecondaryValue(cm.secondaryvalue2);
  var strslevel2 = stringifySecondaryLevel(cm.secondarylevel2);
  var strsstat3 = stringifySecondaryStat(cm.secondarystat3);
  var strsvalue3 = stringifySecondaryValue(cm.secondaryvalue3);
  var strslevel3 = stringifySecondaryLevel(cm.secondarylevel3);
  var strsstat4 = stringifySecondaryStat(cm.secondarystat4);
  var strsvalue4 = stringifySecondaryValue(cm.secondaryvalue4);
  var strslevel4 = stringifySecondaryLevel(cm.secondarylevel4);
  var match = cm.primchar;
  var strchar = match !== undefined ? stringifyCharacterId(match) : " CharacterId: None";
  var match$1 = cm.primmodid;
  var strmoduid = match$1 !== undefined ? stringifyModUId(match$1) : " ModUniqueId: None";
  return strstat + (strval + (strpips + (strshape + (strset + (strlvl + (strtier + (strchar + (strmoduid + (strsstat1 + (strsvalue1 + (strslevel1 + (strsstat2 + (strsvalue2 + (strslevel2 + (strsstat3 + (strsvalue3 + (strslevel3 + (strsstat4 + (strsvalue4 + strslevel4)))))))))))))))))));
}

var jsonFromFile = JSON.parse(Fs.readFileSync("test.json", "utf8"));

function arrayOfOptionsToOptionArray(arrayOfOptions) {
  var emptyArray = [];
  var fcn = function (maybeArray, maybeElem) {
    if (maybeArray !== undefined && maybeElem !== undefined) {
      return $$Array.append(maybeArray, Caml_array.caml_make_vect(1, Caml_option.valFromOption(maybeElem)));
    }
    
  };
  return $$Array.fold_left(fcn, emptyArray, arrayOfOptions);
}

function updateModsObj(profileObjectDict) {
  var emptyArray = [];
  profileObjectDict["mods"] = emptyArray;
  return profileObjectDict;
}

function decodeArrayOfObects(arrayOfJson) {
  return $$Array.map(Js_json.decodeObject, arrayOfJson);
}

function addModListToMap(cmoddict, cMod) {
  var match = cMod.primmodid;
  if (match !== undefined) {
    cmoddict[match[0]] = cMod;
    return cmoddict;
  } else {
    cmoddict[makeModUId] = cMod;
    return cmoddict;
  }
}

var getMainDict = Js_json.decodeObject;

function getProfiles(maindict) {
  var match = Js_dict.get(maindict, "profiles");
  if (match !== undefined) {
    return Js_json.decodeArray(Caml_option.valFromOption(match));
  }
  
}

function getMainProfile(mainjson) {
  var match = Js_json.decodeObject(mainjson);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "profiles");
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        return Js_json.decodeObject(Caml_array.caml_array_get(match$2, 0));
      } else {
        return ;
      }
    } else {
      return ;
    }
  }
  
}

function getModsMapFromProfile(jsondict) {
  var match = Js_dict.get(jsondict, "mods");
  if (match !== undefined) {
    var modlist = Aeson_decode.list(decodeCharMod, Caml_option.valFromOption(match));
    return List.fold_left(addModListToMap, { }, modlist);
  } else {
    return { };
  }
}

function getModsFromJson(mainJson) {
  var match = getMainProfile(mainJson);
  if (match !== undefined) {
    return getModsMapFromProfile(Caml_option.valFromOption(match));
  } else {
    return { };
  }
}

function updateModsInMainProfile(mainProfileDict, cmodDict) {
  var arrayCmods = Js_dict.values(cmodDict);
  var encodedCMods = $$Array.map(encodeCharMod, arrayCmods);
  mainProfileDict["mods"] = encodedCMods;
  return mainProfileDict;
}

function stringifyOptionJson(maybejson) {
  if (maybejson !== undefined) {
    return JSON.stringify(Caml_option.valFromOption(maybejson));
  } else {
    return "None";
  }
}

var test = makeprimaryvalue(/* PrimarySpeed */9, /* PrimaryLevel */[15], /* Pip5 */4);

exports.makeprimaryvalue = makeprimaryvalue;
exports.encodePrimaryStat = encodePrimaryStat;
exports.decodePrimaryStat = decodePrimaryStat;
exports.primaryStatToString = primaryStatToString;
exports.truncatedFloatTo2DigitsString = truncatedFloatTo2DigitsString;
exports.truncatedFloatToIntString = truncatedFloatToIntString;
exports.stringifyValue = stringifyValue;
exports.encodePrimaryValue = encodePrimaryValue;
exports.decodePrimaryValue = decodePrimaryValue;
exports.stringifyPrimaryValue = stringifyPrimaryValue;
exports.encodePips = encodePips;
exports.decodePips = decodePips;
exports.stringifyPips = stringifyPips;
exports.encodeShape = encodeShape;
exports.decodeShape = decodeShape;
exports.stringifyShape = stringifyShape;
exports.encodeStatSet = encodeStatSet;
exports.decodeStatSet = decodeStatSet;
exports.stringifyStatSet = stringifyStatSet;
exports.encodePrimaryLevel = encodePrimaryLevel;
exports.decodePrimaryLevel = decodePrimaryLevel;
exports.stringifyPrimaryLevel = stringifyPrimaryLevel;
exports.encodeTier = encodeTier;
exports.decodeTier = decodeTier;
exports.stringifyTier = stringifyTier;
exports.encodeCharacterId = encodeCharacterId;
exports.decodeCharacterId = decodeCharacterId;
exports.stringifyCharacterId = stringifyCharacterId;
exports.makeModUId = makeModUId;
exports.encodeModUId = encodeModUId;
exports.decodeModUId = decodeModUId;
exports.stringifyModUId = stringifyModUId;
exports.encodeSecondaryStat = encodeSecondaryStat;
exports.decodeSecondaryStat = decodeSecondaryStat;
exports.stringifySecondaryStat = stringifySecondaryStat;
exports.encodeSecondaryValue = encodeSecondaryValue;
exports.decodeSecondaryValue = decodeSecondaryValue;
exports.stringifySecondaryValue = stringifySecondaryValue;
exports.encodeSecondaryLevel = encodeSecondaryLevel;
exports.decodeSecondaryLevel = decodeSecondaryLevel;
exports.stringifySecondaryLevel = stringifySecondaryLevel;
exports.encodeCharMod = encodeCharMod;
exports.decodeCharMod = decodeCharMod;
exports.stringifyCharMod = stringifyCharMod;
exports.jsonFromFile = jsonFromFile;
exports.arrayOfOptionsToOptionArray = arrayOfOptionsToOptionArray;
exports.updateModsObj = updateModsObj;
exports.decodeArrayOfObects = decodeArrayOfObects;
exports.addModListToMap = addModListToMap;
exports.getMainDict = getMainDict;
exports.getProfiles = getProfiles;
exports.getMainProfile = getMainProfile;
exports.getModsMapFromProfile = getModsMapFromProfile;
exports.getModsFromJson = getModsFromJson;
exports.updateModsInMainProfile = updateModsInMainProfile;
exports.stringifyOptionJson = stringifyOptionJson;
exports.test = test;
/* randomuid36 Not a pure module */
